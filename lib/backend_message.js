// Generated by CoffeeScript 2.4.1
var AuthenticationMethods, BackendMessage, messageClass, name, typeOIDs;

AuthenticationMethods = require('./authentication').methods;

typeOIDs = require('./types').typeOIDs;

BackendMessage = (function() {
  class BackendMessage {
    constructor(buffer) {
      this.read(buffer);
    }

    read(buffer) {}

  };

  BackendMessage.prototype.typeId = null;

  return BackendMessage;

}).call(this);

BackendMessage.Authentication = (function() {
  // Implement me in subclass
  class Authentication extends BackendMessage {
    read(buffer) {
      this.method = buffer.readUInt32BE(0);
      if (this.method === AuthenticationMethods.MD5_PASSWORD) {
        return this.salt = buffer.readUInt32BE(4);
      } else if (this.method === AuthenticationMethods.CRYPT_PASSWORD) {
        return this.salt = buffer.readUInt16BE(4);
      }
    }

  };

  Authentication.prototype.typeId = 82; // R

  return Authentication;

}).call(this);

BackendMessage.BackendKeyData = (function() {
  class BackendKeyData extends BackendMessage {
    read(buffer) {
      this.pid = buffer.readUInt32BE(0);
      return this.key = buffer.readUInt32BE(4);
    }

  };

  BackendKeyData.prototype.typeId = 75; // K

  return BackendKeyData;

}).call(this);

BackendMessage.ParameterStatus = (function() {
  class ParameterStatus extends BackendMessage {
    read(buffer) {
      this.name = buffer.readZeroTerminatedString(0);
      return this.value = buffer.readZeroTerminatedString(this.name.length + 1);
    }

  };

  ParameterStatus.prototype.typeId = 83; // S

  return ParameterStatus;

}).call(this);

BackendMessage.NotificationResponse = (function() {
  class NotificationResponse extends BackendMessage {
    read(buffer) {
      this.pid = buffer.readUInt32BE(4);
      this.channel = buffer.readZeroTerminatedString(4);
      return this.payload = buffer.readZeroTerminatedString(this.channel.length + 5);
    }

  };

  NotificationResponse.prototype.typeId = 65; // A

  return NotificationResponse;

}).call(this);

BackendMessage.EmptyQueryResponse = (function() {
  class EmptyQueryResponse extends BackendMessage {};

  EmptyQueryResponse.prototype.typeId = 73; // I

  return EmptyQueryResponse;

}).call(this);

BackendMessage.RowDescription = (function() {
  class RowDescription extends BackendMessage {
    read(buffer) {
      var fieldDescriptor, formatCode, i, j, modifier, name, numberOfFields, pos, ref, size, tableFieldIndex, tableOID, typeOID;
      numberOfFields = buffer.readUInt16BE(0);
      pos = 2;
      this.columns = [];
      for (i = j = 0, ref = numberOfFields; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        name = buffer.readZeroTerminatedString(pos);
        pos += Buffer.byteLength(name) + 1;
        tableOID = buffer.readUInt32BE(pos);
        pos += 4;
        tableFieldIndex = buffer.readUInt16BE(pos);
        pos += 2;
        typeOID = buffer.readUInt32BE(pos);
        pos += 4;
        size = buffer.readUInt16BE(pos);
        pos += 2;
        modifier = buffer.readUInt32BE(pos);
        pos += 4;
        formatCode = buffer.readUInt16BE(pos);
        pos += 2;
        fieldDescriptor = {
          name: name,
          tableOID: tableOID,
          tableFieldIndex: tableFieldIndex,
          typeOID: typeOID,
          type: typeOIDs[typeOID],
          size: size,
          modifier: modifier,
          formatCode: formatCode
        };
        this.columns.push(fieldDescriptor);
      }
      // explicit return to avoid coffeescript generating result array
      return void 0;
    }

  };

  RowDescription.prototype.typeId = 84; // T

  return RowDescription;

}).call(this);

BackendMessage.DataRow = (function() {
  class DataRow extends BackendMessage {
    read(buffer) {
      var data, i, j, length, numberOfFields, pos, ref;
      numberOfFields = buffer.readUInt16BE(0);
      pos = 2;
      this.values = [];
      for (i = j = 0, ref = numberOfFields; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        length = buffer.readUInt32BE(pos);
        pos += 4;
        if (length === 4294967295) {
          data = null;
        } else {
          data = buffer.slice(pos, pos + length);
          pos += length;
        }
        this.values.push(data);
      }
      // explicit return to avoid coffeescript generating result array
      return void 0;
    }

  };

  DataRow.prototype.typeId = 68; // D

  return DataRow;

}).call(this);

BackendMessage.CommandComplete = (function() {
  class CommandComplete extends BackendMessage {
    read(buffer) {
      return this.status = buffer.readZeroTerminatedString(0);
    }

  };

  CommandComplete.prototype.typeId = 67; // C

  return CommandComplete;

}).call(this);

BackendMessage.CloseComplete = (function() {
  class CloseComplete extends BackendMessage {};

  CloseComplete.prototype.typeId = 51; // 3

  return CloseComplete;

}).call(this);

BackendMessage.ParameterDescription = (function() {
  class ParameterDescription extends BackendMessage {
    read(buffer) {
      var count, i;
      count = buffer.readUInt16BE(0);
      return this.parameterTypes = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = count; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
          results.push(buffer.readUInt32BE(2 + i * 4));
        }
        return results;
      })();
    }

  };

  ParameterDescription.prototype.typeId = 116; // t

  return ParameterDescription;

}).call(this);

BackendMessage.ParseComplete = (function() {
  class ParseComplete extends BackendMessage {};

  ParseComplete.prototype.typeId = 49; // 1

  return ParseComplete;

}).call(this);

BackendMessage.ErrorResponse = (function() {
  class ErrorResponse extends BackendMessage {
    read(buffer) {
      var fieldCode, pos, value;
      this.information = {};
      fieldCode = buffer.readUInt8(0);
      pos = 1;
      while (fieldCode !== 0x00) {
        value = buffer.readZeroTerminatedString(pos);
        this.information[this.fieldNames[fieldCode] || fieldCode] = value;
        pos += Buffer.byteLength(value) + 1;
        fieldCode = buffer.readUInt8(pos);
        pos += 1;
      }
      return this.message = this.information['Message'];
    }

  };

  ErrorResponse.prototype.typeId = 69; // E

  ErrorResponse.prototype.fieldNames = {
    83: 'Severity',
    67: 'Code',
    77: 'Message',
    68: 'Detail',
    72: 'Hint',
    80: 'Position',
    112: 'Internal position',
    113: 'Internal query',
    87: 'Where',
    70: 'File',
    76: 'Line',
    82: 'Routine'
  };

  return ErrorResponse;

}).call(this);

BackendMessage.NoticeResponse = (function() {
  class NoticeResponse extends BackendMessage.ErrorResponse {};

  NoticeResponse.prototype.typeId = 78; // N

  return NoticeResponse;

}).call(this);

BackendMessage.ReadyForQuery = (function() {
  class ReadyForQuery extends BackendMessage {
    read(buffer) {
      return this.transactionStatus = buffer.readUInt8(0);
    }

  };

  ReadyForQuery.prototype.typeId = 90; // Z

  return ReadyForQuery;

}).call(this);

BackendMessage.CopyFileResponse = (function() {
  class CopyFileResponse extends BackendMessage {
    read(buffer) {
      var filename, i, j, last, numberOfFiles, pos, ref;
      this.files = [];
      numberOfFiles = buffer.readUInt16BE(0);
      pos = 2;
      for (i = j = 0, ref = numberOfFiles; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        filename = buffer.readZeroTerminatedString(pos);
        this.files.push(filename);
        pos += filename.length + 1;
      }
      return last = buffer.readUInt16BE(pos);
    }

  };

  CopyFileResponse.prototype.typeId = 70; // F

  return CopyFileResponse;

}).call(this);

BackendMessage.CopyInResponse = (function() {
  class CopyInResponse extends BackendMessage {
    read(buffer) {
      var i, j, numberOfFields, pos, ref;
      this.globalFormatType = buffer.readUInt8(0);
      this.fieldFormatTypes = [];
      numberOfFields = buffer.readUInt16BE(1);
      pos = 3;
      for (i = j = 0, ref = numberOfFields; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        this.fieldFormatTypes.push(buffer.readUInt8(pos));
        pos += 1;
      }
      // explicit return to avoid coffeescript generating result array
      return void 0;
    }

  };

  CopyInResponse.prototype.typeId = 71; // G

  return CopyInResponse;

}).call(this);

//#############################################################
// BackendMessage factory
//#############################################################
BackendMessage.types = {};

for (name in BackendMessage) {
  messageClass = BackendMessage[name];
  if (messageClass.prototype && (messageClass.prototype.typeId != null)) {
    messageClass.prototype.event = name;
    BackendMessage.types[messageClass.prototype.typeId] = messageClass;
  }
}

BackendMessage.fromBuffer = function(buffer) {
  var message, typeId;
  typeId = buffer.readUInt8(0);
  messageClass = BackendMessage.types[typeId];
  if (messageClass != null) {
    message = new messageClass(buffer.slice(5));
    return message;
  } else {
    throw new Error(`Unknown message type: ${typeId}`);
  }
};

module.exports = BackendMessage;
