// Generated by CoffeeScript 2.4.1
var Authentication, Buffer, FrontendMessage;

Authentication = require('./authentication');

Buffer = require('./buffer').Buffer;

FrontendMessage = (function() {
  //##########################################
  // Client messages
  //##########################################
  class FrontendMessage {
    payload() {
      return new Buffer(0);
    }

    toBuffer() {
      var b, bLength, headerLength, messageBuffer, payloadBuffer, pos;
      payloadBuffer = this.payload();
      if (typeof payloadBuffer === 'string') {
        bLength = Buffer.byteLength(payloadBuffer);
        b = new Buffer(bLength + 1);
        b.writeZeroTerminatedString(payloadBuffer, 0);
        payloadBuffer = b;
      }
      headerLength = this.typeId != null ? 5 : 4;
      messageBuffer = new Buffer(headerLength + payloadBuffer.length);
      if (this.typeId) {
        messageBuffer.writeUInt8(this.typeId, 0);
        pos = 1;
      } else {
        pos = 0;
      }
      messageBuffer.writeUInt32BE(payloadBuffer.length + 4, pos);
      payloadBuffer.copy(messageBuffer, pos + 4);
      return messageBuffer;
    }

  };

  FrontendMessage.prototype.typeId = null;

  return FrontendMessage;

}).call(this);

FrontendMessage.Startup = (function() {
  class Startup extends FrontendMessage {
    constructor(user, database, options) {
      super();
      this.user = user;
      this.database = database;
      this.options = options;
    }

    payload() {
      var pl, pos;
      pos = 0;
      pl = new Buffer(8192);
      pl.writeUInt32BE(this.protocol, pos);
      pos += 4;
      if (this.user) {
        pos += pl.writeZeroTerminatedString('user', pos);
        pos += pl.writeZeroTerminatedString(this.user, pos);
      }
      if (this.database) {
        pos += pl.writeZeroTerminatedString('database', pos);
        pos += pl.writeZeroTerminatedString(this.database, pos);
      }
      if (this.options) {
        pos += pl.writeZeroTerminatedString('options', pos);
        pos += pl.writeZeroTerminatedString(this.options, pos);
      }
      pl.writeUInt8(0, pos);
      pos += 1;
      return pl.slice(0, pos);
    }

  };

  Startup.prototype.typeId = null;

  Startup.prototype.protocol = 3 << 16;

  return Startup;

}).call(this);

FrontendMessage.SSLRequest = (function() {
  class SSLRequest extends FrontendMessage {
    payload() {
      var pl;
      pl = new Buffer(4);
      pl.writeUInt32BE(this.sslMagicNumber, 0);
      return pl;
    }

  };

  SSLRequest.prototype.typeId = null;

  SSLRequest.prototype.sslMagicNumber = 80877103;

  return SSLRequest;

}).call(this);

FrontendMessage.Password = (function() {
  class Password extends FrontendMessage {
    constructor(password, authMethod, options) {
      super();
      this.password = password;
      this.authMethod = authMethod;
      this.options = options;
      if (this.password == null) {
        this.password = '';
      }
      if (this.authMethod == null) {
        this.authMethod = Authentication.methods.CLEARTEXT_PASSWORD;
      }
      if (this.options == null) {
        this.options = {};
      }
    }

    md5(...values) {
      var hash, i, len, value;
      hash = require('crypto').createHash('md5');
      for (i = 0, len = values.length; i < len; i++) {
        value = values[i];
        hash.update(value);
      }
      return hash.digest('hex');
    }

    encodedPassword() {
      var salt;
      switch (this.authMethod) {
        case Authentication.methods.CLEARTEXT_PASSWORD:
          return this.password;
        case Authentication.methods.MD5_PASSWORD:
          salt = new Buffer(4);
          salt.writeUInt32BE(this.options.salt, 0);
          return "md5" + this.md5(this.md5(this.password, this.options.user), salt);
        default:
          throw new Error(`Authentication method ${this.authMethod} not implemented.`);
      }
    }

    payload() {
      return this.encodedPassword();
    }

  };

  Password.prototype.typeId = 112;

  return Password;

}).call(this);

FrontendMessage.CancelRequest = (function() {
  class CancelRequest extends FrontendMessage {
    constructor(backendPid, backendKey) {
      super();
      this.backendPid = backendPid;
      this.backendKey = backendKey;
    }

    payload() {
      var b;
      b = new Buffer(12);
      b.writeUInt32BE(this.cancelRequestMagicNumber, 0);
      b.writeUInt32BE(this.backendPid, 4);
      b.writeUInt32BE(this.backendKey, 8);
      return b;
    }

  };

  CancelRequest.prototype.cancelRequestMagicNumber = 80877102;

  return CancelRequest;

}).call(this);

FrontendMessage.Close = (function() {
  class Close extends FrontendMessage {
    constructor(type, name) {
      super();
      this.name = name;
      if (this.name == null) {
        this.name = "";
      }
      this.type = (function() {
        switch (type) {
          case 'portal':
          case 'p':
          case 'P':
          case 80:
            return 80;
          case 'prepared_statement':
          case 'prepared':
          case 'statement':
          case 's':
          case 'S':
          case 83:
            return 83;
          default:
            throw new Error(`${type} not a valid type to describe`);
        }
      })();
    }

    payload() {
      var b;
      b = new Buffer(this.name.length + 2);
      b.writeUInt8(this.type, 0);
      b.writeZeroTerminatedString(this.name, 1);
      return b;
    }

  };

  Close.prototype.typeId = 67;

  return Close;

}).call(this);

FrontendMessage.Describe = (function() {
  class Describe extends FrontendMessage {
    constructor(type, name) {
      super();
      this.name = name;
      if (this.name == null) {
        this.name = "";
      }
      this.type = (function() {
        switch (type) {
          case 'portal':
          case 'P':
          case 80:
            return 80;
          case 'prepared_statement':
          case 'prepared':
          case 'statement':
          case 'S':
          case 83:
            return 83;
          default:
            throw new Error(`${type} not a valid type to describe`);
        }
      })();
    }

    payload() {
      var b;
      b = new Buffer(this.name.length + 2);
      b.writeUInt8(this.type, 0);
      b.writeZeroTerminatedString(this.name, 1);
      return b;
    }

  };

  Describe.prototype.typeId = 68;

  return Describe;

}).call(this);

FrontendMessage.Execute = (function() {
  // EXECUTE (E=69)
  class Execute extends FrontendMessage {
    constructor(portal, maxRows) {
      super();
      this.portal = portal;
      this.maxRows = maxRows;
      if (this.portal == null) {
        this.portal = "";
      }
      if (this.maxRows == null) {
        this.maxRows = 0;
      }
    }

    payload() {
      var b, pos;
      b = new Buffer(5 + this.portal.length);
      pos = b.writeZeroTerminatedString(this.portal, 0);
      b.writeUInt32BE(this.maxRows, pos);
      return b;
    }

  };

  Execute.prototype.typeId = 69;

  return Execute;

}).call(this);

FrontendMessage.Query = (function() {
  class Query extends FrontendMessage {
    constructor(sql) {
      super();
      this.sql = sql;
    }

    payload() {
      return this.sql;
    }

  };

  Query.prototype.typeId = 81;

  return Query;

}).call(this);

FrontendMessage.Parse = (function() {
  class Parse extends FrontendMessage {
    constructor(name, sql, parameterTypes) {
      super();
      this.name = name;
      this.sql = sql;
      this.parameterTypes = parameterTypes;
      if (this.name == null) {
        this.name = "";
      }
      if (this.parameterTypes == null) {
        this.parameterTypes = [];
      }
    }

    payload() {
      var b, i, len, paramType, pos, ref;
      b = new Buffer(8192);
      pos = b.writeZeroTerminatedString(this.name, 0);
      pos += b.writeZeroTerminatedString(this.sql, pos);
      b.writeUInt16BE(this.parameterTypes.length, pos);
      pos += 2;
      ref = this.parameterTypes;
      for (i = 0, len = ref.length; i < len; i++) {
        paramType = ref[i];
        b.writeUInt32BE(paramType, pos);
        pos += 4;
      }
      return b.slice(0, pos);
    }

  };

  Parse.prototype.typeId = 80;

  return Parse;

}).call(this);

FrontendMessage.Bind = (function() {
  class Bind extends FrontendMessage {
    constructor(portal, preparedStatement, parameterValues) {
      var i, len, parameterValue;
      super();
      this.portal = portal;
      this.preparedStatement = preparedStatement;
      this.parameterValues = [];
      for (i = 0, len = parameterValues.length; i < len; i++) {
        parameterValue = parameterValues[i];
        this.parameterValues.push(parameterValue.toString());
      }
    }

    payload() {
      var b, i, len, pos, ref, value;
      b = new Buffer(8192);
      pos = 0;
      pos += b.writeZeroTerminatedString(this.portal, pos);
      pos += b.writeZeroTerminatedString(this.preparedStatement, pos);
      b.writeUInt16BE(0x00, pos); // encode values using text
      b.writeUInt16BE(this.parameterValues.length, pos + 2);
      pos += 4;
      ref = this.parameterValues;
      for (i = 0, len = ref.length; i < len; i++) {
        value = ref[i];
        b.writeUInt32BE(value.length, pos);
        pos += 4;
        pos += b.write(value, pos);
      }
      return b.slice(0, pos);
    }

  };

  Bind.prototype.typeId = 66;

  return Bind;

}).call(this);

FrontendMessage.Flush = (function() {
  class Flush extends FrontendMessage {};

  Flush.prototype.typeId = 72;

  return Flush;

}).call(this);

FrontendMessage.Sync = (function() {
  class Sync extends FrontendMessage {};

  Sync.prototype.typeId = 83;

  return Sync;

}).call(this);

FrontendMessage.Terminate = (function() {
  class Terminate extends FrontendMessage {};

  Terminate.prototype.typeId = 88;

  return Terminate;

}).call(this);

FrontendMessage.CopyData = (function() {
  class CopyData extends FrontendMessage {
    constructor(data) {
      super();
      this.data = data;
    }

    payload() {
      return new Buffer(this.data);
    }

  };

  CopyData.prototype.typeId = 100;

  return CopyData;

}).call(this);

FrontendMessage.CopyDone = (function() {
  class CopyDone extends FrontendMessage {};

  CopyDone.prototype.typeId = 99;

  return CopyDone;

}).call(this);

FrontendMessage.CopyFail = (function() {
  class CopyFail extends FrontendMessage {
    constructor(error) {
      super();
      this.error = error;
    }

    payload() {
      return this.error;
    }

  };

  CopyFail.prototype.typeId = 102;

  return CopyFail;

}).call(this);

module.exports = FrontendMessage;
